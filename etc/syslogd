#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use IO::Socket::INET;
use Socket;	# Import for networking functions

# Defaults
my $port = 514;
my $logfile = '/tmp/syslog.log';

# Get command-line options
GetOptions("port=i" => \$port, "file=s" => \$logfile) or die "Usage: $0 [--port <port_number>] [--file <CSV file>]\n";

# Create UDP socket
my $socket = IO::Socket::INET->new(
	LocalPort => $port,
	Proto => 'udp'
) or die "Could not create socket: $!\n";

print "Syslog server listening on UDP port $port...\n";

if(!-r $logfile) {
	# First run - put in the heading row
	open(my $log, '>', $logfile);
	chmod 0600, $log;
	print $log '"Host","facility","severity","msg"',
		"\n";
	close $log;
}

open(my $fout, '>>', $logfile);

while (1) {
	my $message;
	my $remote_address = $socket->recv($message, 1024);

	if($remote_address) {
		my ($port, $ip) = unpack_sockaddr_in($remote_address);

		chomp $message;
		next if(length($message) <= 1);
		
		# Extract PRI field
		if($message =~ /^<(\d+)>(.*)/) {
			my $pri = $1;
			my $log_message = $2;

			my $facility = int($pri / 8);
			my $severity = $pri % 8;

			my $hostname = get_hostname_from_ip($ip) || inet_ntoa($ip);

			print $fout "\"$hostname\",$facility,$severity,\"$log_message\"\n";
		} else {
			print $fout 'Invalid message: >>', (sprintf '%v02X', $message), "<<\n";
		}
	}
	$fout->flush();
}

# Close socket (unreachable in an infinite loop)
$socket->close();

sub get_hostname_from_ip
{
	my $packed_ip = shift;

	# Convert the IP address to an unpacked binary format
	my $ip_address = inet_ntoa($packed_ip);

	# First, check /etc/hosts for a match
	open(my $hosts_file, '<', '/etc/hosts') or warn "Could not open /etc/hosts: $!";
	while (my $line = <$hosts_file>) {
		next if($line =~ /^\s*#/);	# Skip comments
		if($line =~ /\b$ip_address\b\s+(\S+)/) {
			close $hosts_file;
			return $1;	# Return hostname from /etc/hosts
		}
	}
	close $hosts_file;

	# If conversion fails, return undef
	return undef unless($packed_ip);

	# Perform reverse DNS lookup
	my $hostname = gethostbyaddr($packed_ip, AF_INET);

	# Return the hostname or undef if lookup fails
	return $hostname || undef
}
